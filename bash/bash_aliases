# aliases
alias devenv="sudo arkose -n -h"
alias gk='gitk --all &'

# edit remote file locally
alias rsub='rmate -p 52699'

# clean up go path
alias gocls="rm -rf $GOPATH/pkg/*"

alias ssx='ssh -X'
# ssh compression and blowfish encrpytion for faster throughput
alias sscx='ssh -C -X -c blowfish'

alias prettyjson='python -m json.tool'
alias sumcol='paste -sd+ - | bc'
alias zcat='gunzip -c'

_brew_remove() {
    if [ $# -eq 0 ]; then
        echo "usage: brew-remove FORMULA"
        return
    fi
    read -p "Remove package $1? (yes/no): " REMOVE
    if [[ $REMOVE == [Yy] || $REMOVE == [Yy][Ee][Ss] ]]; then
        brew rm $1
    else
        return
    fi
    echo -n "Remove dependencies '"
    echo -n $(join <(brew leaves) <(brew deps $1))
    echo -n "'? (yes/no): "
    read -p "" REMOVE
    if [[ $REMOVE == [Yy] || $REMOVE == [Yy][Ee][Ss] ]]; then
        brew rm $(join <(brew leaves) <(brew deps $1))
    else
        return
    fi
}
_brew_deps() {
    if [ $# -eq 0 ]; then
        echo "usage: brew-deps FORMULA"
        return
    fi
    echo -n "Orphaned dependencies for $1: "
    echo $(join <(brew leaves) <(brew deps $1))
}
alias "brew-remove"="_brew_remove"
alias "brew-deps"="_brew_deps"

_ffmpeg_concat()
{
    if [ $# -lt 3 ]; then
        echo "usage: ffmpeg-concat <part1> <part2> <output>"
        return
    fi
    if [ ! -f "$1" ]; then
        echo "error: file '$1' does not exist"
        return
    fi
    if [ ! -f "$2" ]; then
        echo "error: file '$2' does not exist"
        return
    fi
    echo "file $1" > input.txt
    echo "file $2" >> input.txt
    ffmpeg -f concat -i input.txt -codec copy "$3"
    rm input.txt
}
alias "ffmpeg-concat"="_ffmpeg_concat"

_list_intersect()
{
    index_left=-1
    index_right=-1
    array_left=()
    array_right=()
    for i in $@
    do
        if [ "$i" = "-l" ]; then
            index_left=0
            continue
        fi
        if [ "$i" = "-r" ]; then
            index_right=0
            continue
        fi
        if [ $index_right -ge 0 ]; then
            array_right[$index_right]=$i
            index_right=$(($index_right + 1))
        elif [ $index_left -ge 0 ]; then
            array_left[$index_left]=$i
            index_left=$(($index_left + 1))
        fi
    done

    if [ ${#array_left[@]} -eq 0 ] || [ ${#array_right[@]} -eq 0 ]; then
        echo "usage: list-intersect -l <elem> <elem> <elem> -r <elem> <elem>"
        return
    fi

    # find the intersections
    delete_left=()
    delete_right=()
    intersect=()
    for i in "${!array_left[@]}"
    do
        for j in "${!array_right[@]}"
        do
            if [ "${array_left[$i]}" = "${array_right[$j]}" ]; then
                delete_left+=($i)
                delete_right+=($j)
                intersect+=(${array_left[$i]})
            fi
        done
    done

    # delete items from left and right
    for i in "${delete_left[@]}"
    do
        unset array_left[$i]
    done
    for j in "${delete_right[@]}"
    do
        unset array_right[$j]
    done

    # echo results
    echo "intersection:  ${intersect[*]}"
    echo "unique left :  ${array_left[*]}"
    echo "unique right:  ${array_right[*]}"
}

alias "list-intersect"="_list_intersect"
